import { Telegraf } from "telegraf"
import { BinanceService } from "./services/BinanceService.js"
import { TechnicalAnalysis } from "./analysis/TechnicalAnalysis.js"
import { Logger } from "./utils/Logger.js"
import dotenv from "dotenv"

dotenv.config()

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN)
const binance = new BinanceService()
const technical = new TechnicalAnalysis()
const logger = new Logger()

class TradingSignalBot {
  constructor() {
    this.symbol = "INJUSDT"
  }

  async start() {
    logger.info("üöÄ INJ Trading Signal Bot ba≈üladƒ±")

    // Telegram komandlarƒ±
    bot.command("start", (ctx) => {
      ctx.reply(`
üéØ INJ/USDT Trading Signal Bot

Bu bot siz…ô d…ôqiq trading siqnallarƒ± verir:
‚Ä¢ 15 d…ôqiq…ô, 30 d…ôqiq…ô, 1 saat, 4 saat analizi
‚Ä¢ LONG/SHORT y√∂n√º
‚Ä¢ Maksimum risk s…ôviyy…ôl…ôri
‚Ä¢ Likvidasiya qorunmasƒ±

Komandalar:
/signal - Canlƒ± analiz v…ô siqnal
/help - K√∂m…ôk
      `)
    })

    bot.command("signal", async (ctx) => {
      try {
        ctx.reply("üîç Analiz edilir, g√∂zl…ôyin...")
        const signal = await this.getFullSignal()
        ctx.reply(signal)
      } catch (error) {
        ctx.reply("‚ùå X…ôta: " + error.message)
      }
    })

    bot.command("help", (ctx) => {
      ctx.reply(`
üìã Komandalar:
/signal - Tam analiz v…ô trading siqnalƒ±

üìä N…ô verir:
‚Ä¢ 15d…ôq, 30d…ôq, 1saat, 4saat analizi
‚Ä¢ LONG/SHORT t√∂vsiy…ôsi
‚Ä¢ Maksimum risk h…ôddl…ôri
‚Ä¢ Likvidasiya qorunma s…ôviyy…ôl…ôri

‚ö†Ô∏è Risk: H…ômi≈ü…ô stop-loss qoyun!
      `)
    })

    // H…ôr 5 d…ôqiq…ôd…ô avtomatik analiz
    setInterval(
      async () => {
        try {
          const signal = await this.getFullSignal()
          await bot.telegram.sendMessage(process.env.TELEGRAM_CHAT_ID, signal)
        } catch (error) {
          logger.error("Avtomatik analiz x…ôtasƒ±:", error)
        }
      },
      5 * 60 * 1000,
    ) // 5 d…ôqiq…ô

    bot.launch()
    logger.info("‚úÖ Bot hazƒ±r!")
  }

  async getFullSignal() {
    try {
      // M√ºxt…ôlif timeframe-l…ôr √º√ß√ºn data
      const data15m = await binance.getMarketData(this.symbol, "15m", 50)
      const data30m = await binance.getMarketData(this.symbol, "30m", 50)
      const data1h = await binance.getMarketData(this.symbol, "1h", 50)
      const data4h = await binance.getMarketData(this.symbol, "4h", 50)

      // H…ôr timeframe √º√ß√ºn analiz
      const signal15m = await technical.getSignal(data15m, "15m")
      const signal30m = await technical.getSignal(data30m, "30m")
      const signal1h = await technical.getSignal(data1h, "1h")
      const signal4h = await technical.getSignal(data4h, "4h")

      // √úmumi q…ôrar
      const finalDecision = this.makeFinalDecision([signal15m, signal30m, signal1h, signal4h])

      // Risk hesablamalarƒ±
      const riskLevels = this.calculateRiskLevels(data15m.currentPrice, data4h)

      const currentTime = new Date().toLocaleString("az-AZ", { timeZone: "Asia/Baku" })

      return `
üéØ INJ/USDT TRADING Sƒ∞QNALI

üí∞ Cari Qiym…ôt: $${data15m.currentPrice}
‚è∞ Vaxt: ${currentTime}

üìä Tƒ∞MEFRAME ANALƒ∞Zƒ∞:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìà 15 d…ôqiq…ô: ${signal15m.direction} (${signal15m.strength}%)
üìà 30 d…ôqiq…ô: ${signal30m.direction} (${signal30m.strength}%)
üìà 1 saat: ${signal1h.direction} (${signal1h.strength}%)
üìà 4 saat: ${signal4h.direction} (${signal4h.strength}%)

üéØ √úMUMƒ∞ Q∆èRAR: ${finalDecision.action}
üí™ G√ºv…ôn: ${finalDecision.confidence}%

${finalDecision.action === "LONG" ? "üü¢" : "üî¥"} ${finalDecision.action} A√áIN

üìä Rƒ∞SK S∆èVƒ∞YY∆èL∆èRƒ∞:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${
  finalDecision.action === "LONG"
    ? `üî¥ LONG √º√ß√ºn maksimum d√º≈ü√º≈ü: $${riskLevels.longMaxDown}
‚ö†Ô∏è Stop Loss: $${riskLevels.longStopLoss}
üéØ Take Profit: $${riskLevels.longTakeProfit}`
    : `üî¥ SHORT √º√ß√ºn maksimum y√ºks…ôli≈ü: $${riskLevels.shortMaxUp}
‚ö†Ô∏è Stop Loss: $${riskLevels.shortStopLoss}
üéØ Take Profit: $${riskLevels.shortTakeProfit}`
}

‚ö° Lƒ∞KVƒ∞DASƒ∞YA QORUNMASI:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ Leverage: Maksimum 10x
‚Ä¢ Position √∂l√ß√ºs√º: Balansƒ±n 5%-i
‚Ä¢ Stop Loss m√ºtl…ôq qoyun!

${finalDecision.reasoning}

‚ö†Ô∏è Risk x…ôb…ôrdarlƒ±ƒüƒ±: Crypto trading y√ºks…ôk risklidir!
      `
    } catch (error) {
      logger.error("Signal alma x…ôtasƒ±:", error)
      throw error
    }
  }

  makeFinalDecision(signals) {
    let longScore = 0
    let shortScore = 0
    let totalStrength = 0

    // H…ôr timeframe-in aƒüƒ±rlƒ±ƒüƒ±
    const weights = {
      "15m": 1,
      "30m": 2,
      "1h": 3,
      "4h": 4,
    }

    signals.forEach((signal) => {
      const weight = weights[signal.timeframe]
      const strength = signal.strength / 100

      if (signal.direction === "LONG") {
        longScore += weight * strength
      } else if (signal.direction === "SHORT") {
        shortScore += weight * strength
      }

      totalStrength += weight * strength
    })

    const confidence = Math.round((Math.max(longScore, shortScore) / (longScore + shortScore)) * 100)
    const action = longScore > shortScore ? "LONG" : "SHORT"

    // Q…ôrar s…ôb…ôbi
    let reasoning = "üìã Analiz …ôsaslarƒ±:\n"
    signals.forEach((signal) => {
      reasoning += `‚Ä¢ ${signal.timeframe}: ${signal.direction} (${signal.reason})\n`
    })

    return {
      action,
      confidence,
      reasoning,
      longScore: longScore.toFixed(2),
      shortScore: shortScore.toFixed(2),
    }
  }

  calculateRiskLevels(currentPrice, data4h) {
    const price = Number.parseFloat(currentPrice)

    // ATR hesabla (volatilite)
    const atr = this.calculateATR(data4h.highs, data4h.lows, data4h.closes, 14)
    const atrValue = atr[atr.length - 1] || price * 0.03

    // Support/Resistance s…ôviyy…ôl…ôri
    const support = Math.min(...data4h.lows.slice(-20))
    const resistance = Math.max(...data4h.highs.slice(-20))

    return {
      // LONG riskl…ôri
      longMaxDown: (price - atrValue * 3).toFixed(4),
      longStopLoss: (price - atrValue * 2).toFixed(4),
      longTakeProfit: (price + atrValue * 3).toFixed(4),

      // SHORT riskl…ôri
      shortMaxUp: (price + atrValue * 3).toFixed(4),
      shortStopLoss: (price + atrValue * 2).toFixed(4),
      shortTakeProfit: (price - atrValue * 3).toFixed(4),

      // ∆èlav…ô m…ôlumatlar
      support: support.toFixed(4),
      resistance: resistance.toFixed(4),
      atr: atrValue.toFixed(4),
    }
  }

  calculateATR(highs, lows, closes, period) {
    const trueRanges = []

    for (let i = 1; i < highs.length; i++) {
      const tr1 = highs[i] - lows[i]
      const tr2 = Math.abs(highs[i] - closes[i - 1])
      const tr3 = Math.abs(lows[i] - closes[i - 1])
      trueRanges.push(Math.max(tr1, tr2, tr3))
    }

    const atr = []
    for (let i = period - 1; i < trueRanges.length; i++) {
      const sum = trueRanges.slice(i - period + 1, i + 1).reduce((a, b) => a + b, 0)
      atr.push(sum / period)
    }

    return atr
  }
}

const tradingBot = new TradingSignalBot()
tradingBot.start().catch(console.error)
