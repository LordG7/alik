require("dotenv").config()
const { Telegraf } = require("telegraf")
const cron = require("node-cron")
const moment = require("moment-timezone")
const TechnicalAnalysis = require("./technical-analysis")
const NewsAnalysis = require("./news-analysis")
const RiskManager = require("./risk-manager")
const BinanceClient = require("./binance-client")

class CryptoTradingBot {
  constructor() {
    this.bot = new Telegraf(process.env.BOT_TOKEN)
    this.technicalAnalysis = new TechnicalAnalysis()
    this.newsAnalysis = new NewsAnalysis()
    this.riskManager = new RiskManager()
    this.binanceClient = new BinanceClient()

    this.symbol = "INJUSDT"
    this.timeframe = "15m"
    this.dailyTradeCount = 0
    this.maxDailyTrades = 10
    this.isOperatingHours = false
    this.chatId = null

    this.setupBot()
    this.setupScheduler()
  }

  setupBot() {
    this.bot.start((ctx) => {
      this.chatId = ctx.chat.id
      ctx.reply(
        `ü§ñ Kripto Trading Bot Aktif!\n\nüìä Analiz Edilen Coin: ${this.symbol}\n‚è∞ √áalƒ±≈üma Saatleri: 09:00-23:00 (Bak√º)\nüìà Maksimum G√ºnl√ºk ƒ∞≈ülem: ${this.maxDailyTrades}\nüéØ Hedef Ba≈üarƒ± Oranƒ±: %90\n\nüîß KOMUTLAR:\n/status - Bot durumunu g√∂ster\n/analyze - Manuel analiz yap\n/now - Anƒ±nda analiz yap\n\n‚úÖ Bot hazƒ±r ve analiz yapƒ±yor...`,
      )
    })

    this.bot.command("status", (ctx) => {
      const bakuTime = moment().tz("Asia/Baku").format("HH:mm:ss")
      const status = this.isOperatingHours ? "üü¢ Aktif" : "üî¥ Pasif"
      ctx.reply(
        `üìä Bot Durumu: ${status}\n‚è∞ Bak√º Saati: ${bakuTime}\nüìà G√ºnl√ºk ƒ∞≈ülem: ${this.dailyTradeCount}/${this.maxDailyTrades}`,
      )
    })

    this.bot.command("analyze", async (ctx) => {
      if (!this.isOperatingHours) {
        ctx.reply("‚è∞ Bot √ßalƒ±≈üma saatleri dƒ±≈üƒ±nda (09:00-23:00 Bak√º saati)")
        return
      }
      await this.performAnalysis(ctx)
    })

    this.bot.command("now", async (ctx) => {
      if (!this.isOperatingHours) {
        ctx.reply("‚è∞ Bot √ßalƒ±≈üma saatleri dƒ±≈üƒ±nda (09:00-23:00 Bak√º saati)")
        return
      }

      ctx.reply("üîÑ Anƒ±nda analiz ba≈ülatƒ±lƒ±yor...")
      await this.performAnalysis(ctx)
    })

    this.bot.launch()
    console.log("ü§ñ Telegram Bot ba≈ülatƒ±ldƒ±...")
  }

  setupScheduler() {
    // Her 15 dakikada bir analiz yap
    cron.schedule("*/15 * * * *", async () => {
      if (this.isOperatingHours && this.chatId) {
        await this.performAnalysis()
      }
    })

    // √áalƒ±≈üma saatlerini kontrol et (her dakika)
    cron.schedule("* * * * *", () => {
      this.checkOperatingHours()
    })

    // G√ºnl√ºk i≈ülem sayacƒ±nƒ± sƒ±fƒ±rla
    cron.schedule("0 0 * * *", () => {
      this.dailyTradeCount = 0
      console.log("üìä G√ºnl√ºk i≈ülem sayacƒ± sƒ±fƒ±rlandƒ±")
    })
  }

  checkOperatingHours() {
    const bakuTime = moment().tz("Asia/Baku")
    const hour = bakuTime.hour()
    const wasOperating = this.isOperatingHours

    this.isOperatingHours = hour >= 9 && hour < 23

    if (!wasOperating && this.isOperatingHours && this.chatId) {
      this.bot.telegram.sendMessage(this.chatId, "üü¢ Bot √ßalƒ±≈üma saatleri ba≈üladƒ±! Analiz ba≈ülatƒ±lƒ±yor...")
    } else if (wasOperating && !this.isOperatingHours && this.chatId) {
      this.bot.telegram.sendMessage(this.chatId, "üî¥ Bot √ßalƒ±≈üma saatleri sona erdi. Yarƒ±n 09:00'da tekrar ba≈ülayacak.")
    }
  }

  async performAnalysis(ctx = null) {
    try {
      console.log("üìä Analiz ba≈ülatƒ±lƒ±yor...")

      // Market verilerini al
      const klines = await this.binanceClient.getKlines(this.symbol, this.timeframe, 200)
      const currentPrice = await this.binanceClient.getCurrentPrice(this.symbol)

      // Teknik analiz yap
      const technicalSignal = await this.technicalAnalysis.analyze(klines, currentPrice)

      // Haber analizi yap
      const newsSignal = await this.newsAnalysis.analyze()

      // Risk y√∂netimi
      const riskAssessment = this.riskManager.assessRisk(technicalSignal, newsSignal)

      // Sinyal olu≈ütur
      const signal = this.generateTradingSignal(technicalSignal, newsSignal, riskAssessment, currentPrice)

      if (signal.shouldTrade && this.dailyTradeCount < this.maxDailyTrades) {
        await this.sendTradingSignal(signal, ctx)
        this.dailyTradeCount++
      } else if (signal.volatilityAlert) {
        await this.sendVolatilityAlert(signal, ctx)
      }
    } catch (error) {
      console.error("‚ùå Analiz hatasƒ±:", error)
      if (ctx) ctx.reply("‚ùå Analiz sƒ±rasƒ±nda hata olu≈ütu.")
    }
  }

  generateTradingSignal(technical, news, risk, currentPrice) {
    const signal = {
      timestamp: moment().tz("Asia/Baku").format("DD.MM.YYYY HH:mm:ss"),
      currentPrice: currentPrice,
      direction: null,
      confidence: 0,
      entryPrice: 0,
      stopLoss: 0,
      takeProfit: 0,
      maxRisk: 0,
      shouldTrade: false,
      volatilityAlert: false,
      reasoning: [],
    }

    // Teknik analiz skorunu hesapla
    let technicalScore = 0
    if (technical.rsi < 30) technicalScore += 2 // Oversold
    if (technical.rsi > 70) technicalScore -= 2 // Overbought
    if (technical.macdSignal === "BUY") technicalScore += 2
    if (technical.macdSignal === "SELL") technicalScore -= 2
    if (technical.bollingerSignal === "BUY") technicalScore += 1
    if (technical.bollingerSignal === "SELL") technicalScore -= 1
    if (technical.stochSignal === "BUY") technicalScore += 1
    if (technical.stochSignal === "SELL") technicalScore -= 1

    // Haber etkisini ekle
    technicalScore += news.sentimentScore

    // Volatilite kontrol√º
    if (technical.volatility > 0.05) {
      signal.volatilityAlert = true
      signal.reasoning.push(`‚ö†Ô∏è Y√ºksek volatilite tespit edildi: %${(technical.volatility * 100).toFixed(2)}`)
    }

    // Sinyal y√∂n√ºn√º belirle
    if (technicalScore >= 4) {
      signal.direction = "LONG"
      signal.confidence = Math.min(95, 60 + technicalScore * 5)
      signal.entryPrice = currentPrice * 1.001 // %0.1 yukarƒ±da giri≈ü
      signal.stopLoss = currentPrice * 0.985 // %1.5 stop loss
      signal.takeProfit = currentPrice * 1.025 // %2.5 take profit
      signal.maxRisk = currentPrice * 0.98 // Maksimum %2 d√º≈ü√º≈ü riski
    } else if (technicalScore <= -4) {
      signal.direction = "SHORT"
      signal.confidence = Math.min(95, 60 + Math.abs(technicalScore) * 5)
      signal.entryPrice = currentPrice * 0.999 // %0.1 a≈üaƒüƒ±da giri≈ü
      signal.stopLoss = currentPrice * 1.015 // %1.5 stop loss
      signal.takeProfit = currentPrice * 0.975 // %2.5 take profit
      signal.maxRisk = currentPrice * 1.02 // Maksimum %2 y√ºkseli≈ü riski
    }

    // ƒ∞≈ülem yapƒ±lƒ±p yapƒ±lmayacaƒüƒ±nƒ± belirle
    signal.shouldTrade = signal.confidence >= 85 && risk.riskLevel <= 3

    // Gerek√ßeleri ekle
    signal.reasoning.push(`üìä Teknik Skor: ${technicalScore}`)
    signal.reasoning.push(`üì∞ Haber Skoru: ${news.sentimentScore}`)
    signal.reasoning.push(`‚ö° RSI: ${technical.rsi.toFixed(2)}`)
    signal.reasoning.push(`üìà MACD: ${technical.macdSignal}`)
    signal.reasoning.push(`üéØ G√ºven: %${signal.confidence}`)

    return signal
  }

  async sendTradingSignal(signal, ctx = null) {
    const message = `
üö® TRADƒ∞NG Sƒ∞NYALƒ∞ üö®

üí∞ Coin: ${this.symbol}
üìä Mevcut Fiyat: $${signal.currentPrice.toFixed(4)}
‚è∞ Zaman: ${signal.timestamp}

${signal.direction === "LONG" ? "üìà Y√ñN: LONG (AL)" : "üìâ Y√ñN: SHORT (SAT)"}
üéØ G√ºven Oranƒ±: %${signal.confidence}

üíµ Giri≈ü Fiyatƒ±: $${signal.entryPrice.toFixed(4)}
üõë Stop Loss: $${signal.stopLoss.toFixed(4)}
üéØ Take Profit: $${signal.takeProfit.toFixed(4)}
‚ö†Ô∏è Maksimum Risk: $${signal.maxRisk.toFixed(4)}

üìã ANALƒ∞Z DETAYLARI:
${signal.reasoning.join("\n")}

‚ö° 15 dakika i√ßinde pozisyon ${signal.direction === "LONG" ? "kapatƒ±lmalƒ±" : "kapatƒ±lmalƒ±"}!

üìä G√ºnl√ºk ƒ∞≈ülem: ${this.dailyTradeCount}/${this.maxDailyTrades}
        `

    if (ctx) {
      ctx.reply(message)
    } else if (this.chatId) {
      this.bot.telegram.sendMessage(this.chatId, message)
    }
  }

  async sendVolatilityAlert(signal, ctx = null) {
    const message = `
‚ö†Ô∏è VOLATƒ∞Lƒ∞TE UYARISI ‚ö†Ô∏è

üí∞ Coin: ${this.symbol}
üìä Mevcut Fiyat: $${signal.currentPrice.toFixed(4)}
‚è∞ Zaman: ${signal.timestamp}

${signal.reasoning.join("\n")}

üö® Dikkatli olun! Piyasada y√ºksek volatilite var.
        `

    if (ctx) {
      ctx.reply(message)
    } else if (this.chatId) {
      this.bot.telegram.sendMessage(this.chatId, message)
    }
  }
}

// Bot'u ba≈ülat
const bot = new CryptoTradingBot()

// Graceful shutdown
process.once("SIGINT", () => bot.bot.stop("SIGINT"))
process.once("SIGTERM", () => bot.bot.stop("SIGTERM"))
